{"version":3,"sources":["../../todo-app/src/App.js","../../todo-app/src/reportWebVitals.js","../../todo-app/src/index.js"],"names":["App","tasks","setTasks","useState","id","text","completed","searchText","setSearchText","filter","setFilter","darkMode","setDarkMode","showAddSection","setShowAddSection","newTaskText","setNewTaskText","editingTaskId","setEditingTaskId","editedTaskText","setEditedTaskText","filteredTasks","task","toLowerCase","includes","React","createElement","className","type","placeholder","value","onChange","e","target","onClick","map","key","checked","handleToggleCompleted","Fragment","handleSaveEdit","taskToEdit","find","handleEditTask","FontAwesomeIcon","icon","faPencilAlt","style","color","handleDeleteTask","faTrash","handleAddTask","trim","newTask","length","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1c6afa7f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [tasks, setTasks] = useState([\r\n    { id: 1, text: \"Read recommended book again\", completed: true },\r\n    { id: 2, text: \"Vacation planning\", completed: false },\r\n    { id: 3, text: \"Cook dinner\", completed: false },\r\n    { id: 4, text: \"Sign up for training\", completed: false },\r\n  ]);\r\n\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [showAddSection, setShowAddSection] = useState(false);\r\n  const [newTaskText, setNewTaskText] = useState(\"\");\r\n  const [editingTaskId, setEditingTaskId] = useState(null);\r\n  const [editedTaskText, setEditedTaskText] = useState(\"\");\r\n\r\n  const handleToggleCompleted = (id) => {\r\n    setTasks(tasks.map((task) =>\r\n      task.id === id ? { ...task, completed: !task.completed } : task\r\n    ));\r\n  };\r\n\r\n  const handleAddTask = () => {\r\n    if (newTaskText.trim()) {\r\n      const newTask = {\r\n        id: tasks.length + 1,\r\n        text: newTaskText,\r\n        completed: false,\r\n      };\r\n      setTasks([...tasks, newTask]);\r\n      setNewTaskText(\"\");\r\n      setShowAddSection(false);\r\n    }\r\n  };\r\n\r\n  const handleEditTask = (id) => {\r\n    const taskToEdit = tasks.find((task) => task.id === id);\r\n    setEditingTaskId(id);\r\n    setEditedTaskText(taskToEdit.text);\r\n  };\r\n\r\n  const handleSaveEdit = (id) => {\r\n    setTasks(tasks.map((task) =>\r\n      task.id === id ? { ...task, text: editedTaskText } : task\r\n    ));\r\n    setEditingTaskId(null);\r\n    setEditedTaskText(\"\");\r\n  };\r\n\r\n  const handleDeleteTask = (id) => {\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const filteredTasks = tasks\r\n    .filter((task) => {\r\n      if (filter === \"completed\") return task.completed;\r\n      if (filter === \"uncompleted\") return !task.completed;\r\n      return true;\r\n    })\r\n    .filter((task) => task.text.toLowerCase().includes(searchText.toLowerCase()));\r\n\r\n  return (\r\n    <div className={`todo-app ${darkMode ? \"dark-mode\" : \"\"}`}>\r\n      <div className=\"todo-header\">\r\n        <h1>TODO LIST</h1>\r\n        <div className=\"controls-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search tasks...\"\r\n            value={searchText}\r\n            onChange={(e) => setSearchText(e.target.value)}\r\n          />\r\n          <select value={filter} onChange={(e) => setFilter(e.target.value)}>\r\n            <option value=\"all\">ALL</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n          </select>\r\n          <button\r\n            className=\"theme-toggle-btn\"\r\n            onClick={() => setDarkMode(!darkMode)}\r\n          >\r\n            {darkMode ? \"ðŸŒž Light Mode\" : \"ðŸŒ™ Dark Mode\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"todo-list\">\r\n        {filteredTasks.map((task) => (\r\n          <div\r\n            key={task.id}\r\n            className={`todo-item ${task.completed ? \"completed\" : \"\"}`}\r\n          >\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={task.completed}\r\n              onChange={() => handleToggleCompleted(task.id)}\r\n            />\r\n            {editingTaskId === task.id ? (\r\n              <>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"edit-input\"\r\n                  value={editedTaskText}\r\n                  onChange={(e) => setEditedTaskText(e.target.value)}\r\n                />\r\n                <button className=\"save-btn\" onClick={() => handleSaveEdit(task.id)}>\r\n                  Save\r\n                </button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <p>{task.text}</p>\r\n                <div className=\"action-buttons\">\r\n                  <button className=\"edit-btn\" onClick={() => handleEditTask(task.id)}>\r\n                    <FontAwesomeIcon icon={faPencilAlt} style={{ color: 'gray' }} />\r\n                  </button>\r\n                  <button className=\"delete-btn\" onClick={() => handleDeleteTask(task.id)}>\r\n                    <FontAwesomeIcon icon={faTrash} style={{ color: 'gray' }} />\r\n                  </button>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {showAddSection && (\r\n        <div className=\"add-task-section\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"new-task-input\"\r\n            placeholder=\"New task\"\r\n            value={newTaskText}\r\n            onChange={(e) => setNewTaskText(e.target.value)}\r\n          />\r\n          <button className=\"add-task-btn\" onClick={handleAddTask}>\r\n            Add\r\n          </button>\r\n        </div>\r\n      )}\r\n      <button className=\"add-btn\" onClick={() => setShowAddSection(!showAddSection)}>\r\n        +\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}